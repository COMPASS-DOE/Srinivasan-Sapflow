tsb_2 %>%
filter(Year == "2021") %>%
group_by(BA, Plot) %>%
summarize()
tsb_2 %>%
filter(Year == "2021") %>%
group_by(BA, Plot) %>%
summarize(mean(F_avg))
tsb_2 %>%
filter(Year == "2021") %>%
group_by(BA, Plot) %>%
summarize(mean(F_avg)) -> baci_summ_2021
View(baci_summ_2021)
tsb_2 %>%
filter(Year == "2021") %>%
group_by(BA, Plot) %>%
summarize(mean(F_avg)) -> summ_2021
rm(baci_summ_2021)
baci_diff_2021 <- (summ_2021$`mean(F_avg)`([4]-[3]))
tsb_2 %>%
filter(Year == "2021") %>%
group_by(BA, Plot) %>%
summarize(mean = mean(F_avg)) %>%
mutate(baci_diff_2021 = mean[4]-mean[3])
tsb_2 %>%
filter(Year == "2021") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg))
tsb_2 %>%
filter(Year == "2021") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg)) %>%
spread(group, mean)
tsb_2 %>%
filter(Year == "2021") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg)) %>%
spread(group, mean) -> summ_2021
tsb_2 %>%
filter(Year == "2021") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg)) %>%
spread(group, mean) -> summ21
BACI_diff_2021 <- ((summ21$AfterSaltwater - summ21$BeforeSaltwater) -
(summ21$AfterControl - summ21$BeforeControl))
BACI_diff_2021
tsb_2 %>%
filter(Year == "2021" & BA = "Before",
tsb_2 %>%
filter(Year == "2021" & BA == "Before",
Year == "2024" & BA == "After") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg))
tsb_2 %>%
filter(Year == "2021" & BA == "Before",
Year == "2024" & BA == "After")
View(Cand.set)
tsb_2 %>%
filter(Year == "2021" & BA == "Before" |
Year == "2024" & BA == "After") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg))
tsb_2 %>%
filter(Year == "2021" & BA == "Before" |
Year == "2024" & BA == "After") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg)) -> summ
BACI_diff_full <- ((summ$AfterSaltwater - summ$BeforeSaltwater) -
(summ$AfterControl - summ$BeforeControl))
View(summ)
BACI_diff_full <- ((summ$AfterSaltwater - summ$BeforeSaltwater) -
(summ$AfterControl - summ$BeforeControl))
tsb_2 %>%
filter(Year == "2021" & BA == "Before" |
Year == "2024" & BA == "After") %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg)) %>%
spread(group, mean)-> summ
BACI_diff_full <- ((summ$AfterSaltwater - summ$BeforeSaltwater) -
(summ$AfterControl - summ$BeforeControl))
BACI_diff_full
?interval
?confint.glm
?lme4
#for confidence intervals, pretty sure we're comparing salt & control
ci <- confint(model.int_sr, level = 0.95)
ci
?confint
library(emmeans)
#for confidence intervals, pretty sure we're comparing salt & control
ci <- confint(model.int_sr, level = 0.95)
View(ci)
#General packages:
library(tidyr)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
#General packages:
library(tidyr)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
#Analysis-specific packages:
# List of packages to be used in the R session
.packages = c("lme4", "AICcmodavg", "MuMIn", "pbkrtest",
"parallel", "data.table", "blmeco", "lsmeans")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Attach packages
sapply(.packages, require, character.only=TRUE)
full_data <- readRDS("Full_21_24.rds")
#TEMPEST EVENTS
tempest_events <- bind_rows(
tibble( Year = 2021, flood_start = "2021-06-12", flood_end = "2021-06-12"), #average date = June 12
tibble( Year = 2022, flood_start = "2022-06-22", flood_end = "2022-06-22"), #June 22
tibble( Year = 2023, flood_start = "2023-06-06", flood_end = "2023-06-07"), #June 6, 7
tibble( Year = 2024, flood_start = "2024-06-11", flood_end = "2024-06-13")) #June 11, 12, 13
tempest_events %>%
mutate(flood_start = ymd(flood_start),
flood_end = ymd(flood_end)) -> events
#window of data to look at
window <- days(15)
#Tidy up our data:
full_data %>%
dplyr::select(Year, Species, ID, TIMESTAMP, Plot, `F`) %>%
mutate(Date = as_date(date(TIMESTAMP)),
Hour = hour(TIMESTAMP)) %>%
left_join(events) %>%
group_by(Year) %>%
mutate(data_start = flood_start - window,
data_end = flood_end + window) %>%
filter(Date > data_start & Date < flood_start |
Date < data_end & Date > flood_end,
Hour < 14, Hour >= 11,
Plot != "Freshwater",
Species == "Tulip Poplar") %>%
ungroup() -> tulip_salt
tulip_salt %>%
group_by(Year) %>%
mutate(BA = ifelse(Date > flood_end, "After", "Before"),
Year = as.factor(Year),
ID = as.factor(ID),
BA = as.factor(BA),
Plot = as.factor(Plot)) %>%
filter(`F` < 6e-06) %>% #remove outliers, ggplot below for confirmation
group_by(Date, Plot, ID, Year, BA, flood_start, flood_end) %>%
summarise(F_avg = mean(`F`, na.rm = TRUE),
n = n()) %>%
ungroup()-> tsb_1
ggplot(tulip_salt[tulip_salt$`F` < 6e-06,],
aes(Date, `F`, color = ID)) +
geom_point() + facet_grid(Plot~Year, scales = "free")
ggplot(tsb_1,
aes(Date, F_avg, color = ID, shape = BA)) +
geom_point() + facet_grid(Plot~Year, scales = "free")
tsb_1 %>%
group_by(Year) %>%
mutate(Day = ifelse(BA == "Before",
- as.numeric(flood_start - Date),
as.numeric(Date - flood_end))) -> tsb_2
ggplot(tsb_2, aes(Day, F_avg, color = ID, shape = BA)) +
geom_point(size = 2.5) + facet_grid(Plot~Year, scales = "free")
Cand.set <- list()
Cand.set[[1]] <- glmer(F_avg ~ BA + Plot  + BA*Plot +
(1|ID) + (1|Year),
data = tsb_2, family = gaussian)
model.noint <- Cand.set[[1]]
Cand.set[[2]] <- glmer(F_avg ~ BA + Plot + BA*Plot +
(1|ID) + (1|Year) +
(1|ID:Year),
data = tsb_2, family = gaussian)
model.int <- Cand.set[[2]]
AIC.res.table <- aictab(cand.set = list(Cand.set[[1]], Cand.set[[2]]),
modnames = paste0("Cand.set_", c(1,2)),
second.ord = TRUE)
AIC.res.table
qqnorm(residuals(model.int),
main = "Q-Q plot - residuals")
qqline(residuals(model.int), col="red")
# inspecting the random effects (see also Bolker, 2009 - supp 1)
qqnorm(unlist(ranef(model.int)),
main = "Q-Q plot, random effects")
qqline(unlist(ranef(model.int)), col="red")
# fitted vs residuals
scatter.smooth(fitted(model.int),
residuals(model.int, type="pearson"),
main="fitted vs residuals",
xlab="Fitted Values", ylab="Residuals")
abline(h=0, col="red")
library(e1071)
current_skewness <- skewness(tsb_2$F_avg)
print(paste("Current Skewness:", current_skewness))
# Logarithmic Transformation
log_transformed_response <- log(tsb_2$F_avg + 1)
# Square Root Transformation
sqrt_transformed_response <- sqrt(tsb_2$F_avg)
# Inverse Transformation
inv_transformed_response <- 1 / tsb_2$F_avg
log_skewness <- skewness(log_transformed_response)
sqrt_skewness <- skewness(sqrt_transformed_response)
inv_skewness <- skewness(inv_transformed_response)
print(paste("Log Transformation Skewness:", log_skewness))
print(paste("Square Root Transformation Skewness:", sqrt_skewness))
print(paste("Inverse Transformation Skewness:", inv_skewness))
model.int_sr <- glmer(sqrt(F_avg) ~ BA + Plot + BA*Plot +
(1|ID) + (1|Year) +
(1|ID:Year),
data = tsb_2, family = gaussian)
ggplot(tsb_2, aes(sqrt(F_avg))) + geom_histogram() +
facet_grid(Plot~.)
qqnorm(residuals(model.int_sr),
main = "Q-Q plot - residuals")
qqline(residuals(model.int_sr), col="red")
# inspecting the random effects (see also Bolker, 2009 - supp 1)
qqnorm(unlist(ranef(model.int_sr)),
main = "Q-Q plot, random effects")
qqline(unlist(ranef(model.int_sr)), col="red")
# fitted vs residuals
scatter.smooth(fitted(model.int_sr),
residuals(model.int_sr, type="pearson"),
main="fitted vs residuals",
xlab="Fitted Values", ylab="Residuals")
abline(h=0, col="red")
model.noint_sr <- glmer(sqrt(F_avg) ~ BA + Plot  + BA*Plot +
(1|ID) + (1|Year),
data = tsb_2, family = gaussian)
refdist.pb.100.interaction <- PBrefdist(largeModel = model.int_sr,
smallModel = model.noint_sr,
nsim = 100, seed = 1989)
compar.interaction.100 <- PBmodcomp(largeModel = model.int_sr,
smallModel = model.noint_sr,
ref = refdist.pb.100.interaction)
compar.interaction.100
tsb_2 %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group, Year) %>%
summarize(mean = mean(F_avg), ) %>%
spread(group, mean)
tsb_2 %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group, Year) %>%
summarize(mean = mean(F_avg))
tsb_2 %>%
mutate(group = paste0(BA, Plot, Year)) %>%
group_by(group, Year) %>%
summarize(mean = mean(F_avg))
tsb_2 %>%
mutate(group = paste0(BA, Plot, Year)) %>%
group_by(group) %>%
summarize(mean = mean(F_avg)) %>%
spread(group, mean)
tsb_2 %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group, Year) %>%
summarize(mean = mean(F_avg)) %>%
spread(group, mean)
tsb_2 %>%
mutate(group = paste0(BA, Plot)) %>%
group_by(group, Year) %>%
summarize(mean = mean(F_avg)) %>%
spread(group, mean) -> summ
summ %>%
group_by(Year) %>%
summarize(BACI_diff = ((AfterSaltwater - BeforeSaltwater) -
(AfterControl - BeforeControl)))
summ %>%
group_by(Year) %>%
summarize(BACI_diff = ((AfterSaltwater - BeforeSaltwater) -
(AfterControl - BeforeControl))) -> BACI_diff
BACI_diff
#for confidence intervals, pretty sure we're comparing salt & control
ci <- confint(model.int_sr, level = 0.95)
ci
ci <- confint(model.int_sr, level = 0.99)
ci
##Isolating different species & '21 vs '24
full_data %>%
dplyr::select(Year, Species, ID, TIMESTAMP, Plot, `F`) %>%
mutate(Date = as_date(date(TIMESTAMP)),
Hour = hour(TIMESTAMP)) %>%
left_join(events) %>%
group_by(Year) %>%
mutate(data_start = flood_start - window,
data_end = flood_end + window) %>%
filter(Date > data_start & Date < flood_start |
Date < data_end & Date > flood_end,
Hour < 14, Hour >= 11,
Plot != "Freshwater",
Species == "Red Maple") %>%
ungroup() -> maple_salt
ggplot(maple_salt[maple_salt$`F` < 6e-06,],
aes(Date, `F`, color = ID)) +
geom_point() + facet_grid(Plot~Year, scales = "free")
ggplot(maple_salt[maple_salt$`F` < 1e-06,],
aes(Date, `F`, color = ID)) +
geom_point() + facet_grid(Plot~Year, scales = "free")
ggplot(maple_salt[maple_salt$`F` < 4e-07,],
aes(Date, `F`, color = ID)) +
geom_point() + facet_grid(Plot~Year, scales = "free")
maple_salt %>%
group_by(Year) %>%
mutate(BA = ifelse(Date > flood_end, "After", "Before"),
Year = as.factor(Year),
ID = as.factor(ID),
BA = as.factor(BA),
Plot = as.factor(Plot)) %>%
filter(`F` < 4e-07) %>% #remove outliers, ggplot below for confirmation
group_by(Date, Plot, ID, Year, BA, flood_start, flood_end) %>%
summarise(F_avg = mean(`F`, na.rm = TRUE),
n = n()) %>%
ungroup()-> msb_1
msb_1 %>%
group_by(Year) %>%
mutate(Day = ifelse(BA == "Before",
- as.numeric(flood_start - Date),
as.numeric(Date - flood_end))) -> msb_2
model.noint_sr <- glmer(sqrt(F_avg) ~ BA + Plot +
(1|ID) + (1|Year) + (1|ID:Year),
data = tsb_2, family = gaussian)
refdist.pb.100.interaction <- PBrefdist(largeModel = model.int_sr,
smallModel = model.noint_sr,
nsim = 100, seed = 1989)
compar.interaction.100 <- PBmodcomp(largeModel = model.int_sr,
smallModel = model.noint_sr,
ref = refdist.pb.100.interaction)
compar.interaction.100
ci <- confint(model.int_sr, level = 0.95)
ci
#Create same model as for tulip poplars, assuming same transformation is applicable
model.int_sr_maple <- glmer(sqrt(F_avg) ~ BA + Plot + BA*Plot
(1|ID) + (1|Year) + (1|Year:ID),
data = msb_2, family = gaussian)
model.noint_sr_maple <- glmer(sqrt(F_avg) ~ BA + Plot +
(1|ID) + (1|Year) + (1|Year:ID),
data = msb_2, family = gaussian)
refdist.pb.100.interaction <- PBrefdist(largeModel = model.int_sr_maple,
smallModel = model.noint_sr_maple,
nsim = 100, seed = 1989)
#Create same model as for tulip poplars, assuming same transformation is applicable
model.int_sr_maple <- glmer(sqrt(F_avg) ~ BA + Plot + BA*Plot
(1|ID) + (1|Year) + (1|Year:ID),
data = msb_2, family = gaussian)
View(msb_2)
#Create same model as for tulip poplars, assuming same transformation is applicable
model.int_sr_maple <- glmer(sqrt(F_avg) ~ BA + Plot + BA*Plot
(1|ID) + (1|Year) + (1|Year:ID),
data = msb_2, family = gaussian)
#Create same model as for tulip poplars, assuming same transformation is applicable
model.int_sr_maple <- glmer(sqrt(F_avg) ~ BA + Plot + BA*Plot +
(1|ID) + (1|Year) + (1|Year:ID),
data = msb_2, family = gaussian)
model.noint_sr_maple <- glmer(sqrt(F_avg) ~ BA + Plot +
(1|ID) + (1|Year) + (1|Year:ID),
data = msb_2, family = gaussian)
refdist.pb.100.interaction <- PBrefdist(largeModel = model.int_sr_maple,
smallModel = model.noint_sr_maple,
nsim = 100, seed = 1989)
compar.interaction.100 <- PBmodcomp(largeModel = model.int_sr_maple,
smallModel = model.noint_sr_maple,
ref = refdist.pb.100.interaction)
compar.interaction.100
View(tsb_2)
#Tulip Poplars, pre 21- post 24
tsb_2 %>%
filter(Year == "2021" & BA == "Before" |
Year == "2024" & BA == "After") -> tsb_3
View(tsb_2)
View(tsb_3)
model.int_sr_tsb3 <- glmer(sqrt(F_avg) ~ BA + Plot + BA*Plot +
(1|ID) + (1|Year) + (1|Year:ID),
data = tsb_3, family = gaussian)
model.noint_sr_tsb3 <- glmer(sqrt(F_avg) ~ BA + Plot +
(1|ID) + (1|Year) + (1|Year:ID),
data = tsb_3, family = gaussian)
###
refdist.pb.100.interaction <- PBrefdist(largeModel = model.int_sr_tsb3,
smallModel = model.noint_sr_tsb3,
nsim = 100, seed = 1989)
###
refdist.pb.100.interaction <- PBrefdist(largeModel = model.int_sr_tsb3,
smallModel = model.noint_sr_tsb3,
nsim = 100, seed = 1989)
compar.interaction.100 <- PBmodcomp(largeModel = model.int_sr_tsb3,
smallModel = model.noint_sr_tsb3,
ref = refdist.pb.100.interaction)
compar.interaction.100
model.noint_sr <- glmer(sqrt(F_avg) ~ BA + Plot +
(1|ID) + (1|Year) + (1|ID:Year),
data = tsb_2, family = gaussian)
refdist.pb.100.interaction <- PBrefdist(largeModel = model.int_sr,
smallModel = model.noint_sr,
nsim = 100, seed = 1989)
compar.interaction.100 <- PBmodcomp(largeModel = model.int_sr,
smallModel = model.noint_sr,
ref = refdist.pb.100.interaction)
compar.interaction.100
summary(model.int_sr)
View(model.int_sr)
library(car)
Anova(model.int_sr)
Anova(model.int_sr, type = "III")
library(car)
model.int_sr <- glmer(sqrt(F_avg) ~ BA + Plot + BA*Plot +
(1|ID) + (1|Year) +
(1|ID:Year),
data = tsb_2, family = gaussian)
Anova(model.int_sr, type = "III")
ggplot(tsb_2, aes(F_avg)) + geom_histogram() +
facet_grid(Plot~.)
ggplot(tsb_2, aes(sqrt(F_avg))) + geom_histogram() +
facet_grid(Plot~.)
qqnorm(predict(model.int_sr),
main = "Q-Q, Predicted vs Observed \n square root transformed")
qqline(predict(model.int_sr), col="red")
qqnorm(predict(model.int),
main = "Q-Q, Predicted vs Observed \n untransformed")
qqline(predict(model.int), col="red")
View(full_data)
View(tsb_1)
View(tulip_salt)
View(tsb_2)
View(tsb_1)
tulip_salt %>%
group_by(Year) %>%
mutate(BA = ifelse(Date > flood_end, "After", "Before"),
Year = as.factor(Year),
ID = as.factor(ID),
BA = as.factor(BA),
Plot = as.factor(Plot)) %>%
filter(`F` < 4e-06) %>% #remove outliers, ggplot below for confirmation
group_by(Date, Plot, ID, Year, BA, flood_start, flood_end) %>%
summarise(F_avg = mean(`F`, na.rm = TRUE),
n = n()) %>%
ungroup() %>%
mutate(BA = ifelse(Year == "2021", "Before", BA)) -> tsb_1
tulip_salt %>%
group_by(Year) %>%
mutate(BA = ifelse(Date > flood_end, "After", "Before"),
Year = as.factor(Year),
ID = as.factor(ID),
BA = as.factor(BA),
Plot = as.factor(Plot)) %>%
filter(`F` < 4e-06) %>% #remove outliers, ggplot below for confirmation
group_by(Date, Plot, ID, Year, BA, flood_start, flood_end) %>%
summarise(F_avg = mean(`F`, na.rm = TRUE),
n = n()) %>%
ungroup() -> tsb_1
tsb_1 %>%
group_by(Year) %>%
mutate(Day = ifelse(BA == "Before",
- as.numeric(flood_start - Date),
as.numeric(Date - flood_end))) %>%
mutate(BA = ifelse(Year == "2021", "Before", BA)) -> tsb_2
View(tsb_1)
tsb_1 %>%
group_by(Year) %>%
mutate(Day = ifelse(BA == "Before",
- as.numeric(flood_start - Date),
as.numeric(Date - flood_end))) %>%
mutate(BA = ifelse(Year == 2021, "Before", BA)) -> tsb_2
tsb_1 %>%
group_by(Year) %>%
mutate(Day = ifelse(BA == "Before",
- as.numeric(flood_start - Date),
as.numeric(Date - flood_end))) %>%
mutate(BA = as.character(BA)) %>%
mutate(BA = ifelse(Year == 2021, "Before", BA)) -> tsb_2
View(tsb_2)
View(full_data)
full_data %>%
select(TIMESTAMP, Year, PAR, soil_vwc_15cm) -> par_swc
#packages packages
#General packages:
library(tidyr)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(car)
.packages = c("lme4", "AICcmodavg", "MuMIn", "pbkrtest",
"parallel", "data.table", "blmeco", "lsmeans")
sapply(.packages, require, character.only=TRUE)
full_data <- readRDS("Full_21_24.rds")
full_data %>%
select(TIMESTAMP, Year, PAR, soil_vwc_15cm) -> par_swc
?select
#packages packages
#General packages:
library(tidyr)
full_data %>%
select(TIMESTAMP, Year, PAR, soil_vwc_15cm) -> par_swc
full_data %>%
select(TIMESTAMP) -> par_swc
full_data %>%
select(TIMESTAMP)
full_data %>%
select(PAR)
tsb_1 %>%
select(Date)
tsb_1 %>%
select(Date)
