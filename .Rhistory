filter(Plot == "Control") %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(F <= 17500, F > 0) %>%
group_by(Species, TIMESTAMP) %>%
summarise(F_avg = mean(F, na.rm = FALSE),
temp_avg = mean(TEMP, na.rm = FALSE)) %>%
mutate(F_avg = round(F_avg, digits = 3)) -> temp_plot_avg
temp_plot_avg %>%
ggplot(aes(x = temp_avg, y = F_avg,
color = Species)) +
geom_point() +
geom_smooth(method = "lm") + ylim(0, NA) +
facet_wrap(~Species, scale = "fixed") +
#facet_wrap(~Plot, scale = "free") +
stat_poly_eq(aes(label = paste(..rr.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.05, label.y = 0.99) +
stat_poly_eq(aes(label = paste(..p.value.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.3, label.y = 0.985) +
labs(x = "Average Air Temperature (C)",
y = "Average Sap Flux Density (m^3/s)",
title = "Air Temp vs Sap Flux Density for Control Plot, 11 AM - 12 PM")
ggsave("AirTemp.jpeg")
full_data %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
filter(Plot == "Control") %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(F <= 17500, F > 0) %>%
group_by(Species, TIMESTAMP) %>%
summarise(F_avg = mean(F, na.rm = FALSE),
par_avg = mean(PAR, na.rm = FALSE)) %>%
mutate(F_avg = round(F_avg, digits = 3)) -> par_plot_avg
full_data %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
filter(Plot == "Control") %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(F <= 17500, F > 0) %>%
group_by(Species, TIMESTAMP) %>%
summarise(F_avg = mean(F, na.rm = FALSE),
par_avg = mean(PAR, na.rm = FALSE)) %>%
mutate(F_avg = round(F_avg, digits = 3)) -> par_plot_avg
par_plot_avg %>%
ggplot(aes(x = par_avg, y = F_avg,
color = Species)) +
geom_point() +
geom_smooth(method = "lm") + ylim(0, NA) +
facet_wrap(~Species, scale = "fixed") +
#facet_wrap(~Plot, scale = "free") +
stat_poly_eq(aes(label = paste(..rr.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.05, label.y = 0.99) +
stat_poly_eq(aes(label = paste(..p.value.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.3, label.y = 0.985) +
labs(x = "Average PAR",
y = "Average Sap Flux Density (m^3/s)",
title = "PAR vs Sap Flux Density for Control Plot, 11 AM - 12 PM")
ggsave("PAR.jpeg")
full_data %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
filter(Plot == "Control") %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(F <= 17500, F > 0) %>%
group_by(Species, TIMESTAMP) %>%
summarise(F_avg = mean(F, na.rm = FALSE),
vwc_avg = mean(soil_vwc_15cm, na.rm = FALSE)) %>%
mutate(F_avg = round(F_avg, digits = 3)) -> vwc_plot_avg
vwc_plot_avg %>%
ggplot(aes(x = vwc_avg, y = F_avg,
color = Species)) +
geom_point() +
geom_smooth(method = "lm") + ylim(0, NA) +
facet_wrap(~Species, scale = "fixed") +
#facet_wrap(~Plot, scale = "free") +
stat_poly_eq(aes(label = paste(..rr.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.05, label.y = 0.99) +
stat_poly_eq(aes(label = paste(..p.value.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.3, label.y = 0.985) +
labs(x = "Average Soil Volumetric Water Content",
y = "Average Sap Flux Density (m^3/s)",
title = "VWC vs Sap Flux Density for Control Plot, 11 AM - 12 PM")
full_data %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(year(TIMESTAMP) != 2021,
F <= 17500, F > 0) -> anova
full_aov <- aov(F ~ Species * Plot, data = anova )
sap flux density
ggsave("PAR.jpeg")
?ggsave
par_plot_avg %>%
ggplot(aes(x = par_avg, y = F_avg,
color = Species)) +
geom_point() +
geom_smooth(method = "lm") + ylim(0, NA) +
facet_wrap(~Species, scale = "fixed") +
#facet_wrap(~Plot, scale = "free") +
stat_poly_eq(aes(label = paste(..rr.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.05, label.y = 0.99) +
stat_poly_eq(aes(label = paste(..p.value.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.3, label.y = 0.985) +
labs(x = "Average PAR",
y = "Average Sap Flux Density (m^3/s)",
title = "PAR vs Sap Flux Density for Control Plot, 11 AM - 12 PM")
ggsave("PAR.jpeg", width = 11.6, height = 7.28)
full_data %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
filter(Plot == "Control") %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(F <= 17500, F > 0) %>%
group_by(Species, TIMESTAMP) %>%
summarise(F_avg = mean(F, na.rm = FALSE),
vwc_avg = mean(soil_vwc_15cm, na.rm = FALSE)) %>%
mutate(F_avg = round(F_avg, digits = 3)) -> vwc_plot_avg
vwc_plot_avg %>%
ggplot(aes(x = vwc_avg, y = F_avg,
color = Species)) +
geom_point() +
geom_smooth(method = "lm") + ylim(0, NA) +
facet_wrap(~Species, scale = "fixed") +
#facet_wrap(~Plot, scale = "free") +
stat_poly_eq(aes(label = paste(..rr.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.05, label.y = 0.99) +
stat_poly_eq(aes(label = paste(..p.value.label.., sep = "~~~")),
formula = y ~ x, label.x = 0.3, label.y = 0.985) +
labs(x = "Average Soil Volumetric Water Content",
y = "Average Sap Flux Density (m^3/s)",
title = "VWC vs Sap Flux Density for Control Plot, 11 AM - 12 PM")
ggsave("SoilVWC.jpeg", width = 11.6, height = 7.28)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
#TEMPEST data from 2022-24
site <- "TMP"
variables <- c("sapflow_2.5cm", "soil_vwc_15cm")
pat <- paste0("^", site, ".*csv$")
#Lists of data for different years for TEMPEST
files_T24 <- list.files("C:/Users/srin662/OneDrive - PNNL/Documents/R/TMP_2024/", pattern = pat, recursive = TRUE, full.names = TRUE)
files_T23 <- list.files("C:/Users/srin662/OneDrive - PNNL/Documents/R/TMP_2023/", pattern = pat, recursive = TRUE, full.names = TRUE)
files_T22 <- list.files("C:/Users/srin662/OneDrive - PNNL/Documents/R/TMP_2022/", pattern = pat, recursive = TRUE, full.names = TRUE)
files_T21 <- list.files("C:/Users/srin662/OneDrive - PNNL/Documents/R/TMP_2021/", pattern = pat, recursive = TRUE, full.names = TRUE)
files_T <- c(files_T24, files_T23, files_T22, files_T21)
f <- function(f) {
message("Reading ", basename(f))
x <- read_csv(f, col_types = "ccTccccdccii")
x[x$research_name %in% variables | x$Sensor_ID == "F19D",]
}
#Bind together all files
dat <- lapply(files_T,  f)
dat <- do.call("rbind", dat)
tmp_full <- dat
#Correction for F19 being mislabeled as F19D in L1 data
tmp_full %>%
drop_na(Sensor_ID) %>%
mutate(Sensor_ID = ifelse(Sensor_ID == "F19D", "F19", Sensor_ID)) -> tmp_full
saveRDS(tmp_full, "tmp_full.rds")
tmp_full <- readRDS("tmp_full.rds")
#GCREW data from 2022-24
#Note: vappress is all 0 for now until we get that sorted out
site <- "GCW"
variables <- c("wx_tempavg15", "wx_par_den15", "wx_vappress15")
pat <- paste0("^", site, ".*csv$")
#Lists of data for different years for GCREW
files_G24 <- list.files("C:/Users/srin662/OneDrive - PNNL/Documents/R/GCW_2024/", pattern = pat, recursive = TRUE, full.names = TRUE)
files_G23 <- list.files("C:/Users/srin662/OneDrive - PNNL/Documents/R/GCW_2023/", pattern = pat, recursive = TRUE, full.names = TRUE)
files_G22 <- list.files("C:/Users/srin662/OneDrive - PNNL/Documents/R/GCW_2022/", pattern = pat, recursive = TRUE, full.names = TRUE)
files_G <- c(files_G24, files_G23, files_G22)
f <- function(f) {
message("Reading ", basename(f))
x <- read_csv(f, col_types = "ccTccccdccii")
x[x$research_name %in% variables,]
}
#Bind together all files
dat <- lapply(files_G,  f)
dat <- do.call("rbind", dat)
gcw_full <- dat
saveRDS(gcw_full, "gcw_full.rds")
gcw_full <- readRDS("gcw_full.rds")
#Combining it all: editing dataframes for variables to match
species <- readRDS("dbh.rds")
tmp_full %>%
mutate(Plot = substr(Plot,1,1),
Plot = case_when(Plot == "C" ~ "Control",
Plot == "F" ~ "Freshwater",
Plot == "S" ~ "Saltwater", )) -> tmp_full
species %>%
mutate(Species = substr(spp,1,4),
Species = case_when(spp == "ACRU" ~ "Red Maple",
spp == "LITU" ~ "Tulip Poplar",
spp == "FAGR" ~ "Beech")) %>%
select(Plot, Sapflux_ID, Species) %>%
filter(!grepl("D", Sapflux_ID)) -> species
#Because different variables are at different spatial resolutions, we have to
#separate variables into dataframes then merge again by timestamp
#Create sapflow-only dataframe with scaled Fd
sapflow <- tmp_full %>%
filter(Instrument == "Sapflow",
Value >= 0.01, Value <=1) %>%
select(Plot, TIMESTAMP, Sensor_ID, Value) %>%
mutate(sapflow_2.5cm = Value) %>%
mutate(Date = date(TIMESTAMP))
#Merge sapflow and species dataframe
sapflow_sp <-
merge(species, sapflow, by.x = c("Sapflux_ID", "Plot"), by.y = c("Sensor_ID", "Plot"), all.x = TRUE, all.y = TRUE)
mutate(sapflow_sp, ID = Sapflux_ID) -> sapflow_sp
#Calculate dTmax
sapflow_sp %>%
mutate(Date = date(TIMESTAMP)) %>%
group_by(Date, Plot, Species, ID) %>%
summarise(dTmax = max(Value, na.rm = TRUE),
dTmax_time = TIMESTAMP[which.max(Value)])-> sapflow_dtmax
#Calculate Fd
sapflow_sp %>%
left_join(sapflow_dtmax, by = c("Plot", "Species", "ID", "Date")) %>%
mutate(Fd = 360000 * (0.00011899) * (((dTmax / Value) - 1)^1.231)) -> sfd_data
summary(sfd_data$Fd)
hist(sfd_data$Fd)
View(sapflow_sp)
View(sfd_data)
#Load in dbh data (for scaling)
inventory <- readRDS("dbh.rds")
inventory %>%
select(Tree_ID, Sapflux_ID, spp, DBH_2024, DBH_2022, DBH_2023, DBH_2021) -> dbh
SA <- function(Species, DBH) {
case_when(
Species == "Red Maple" ~ (0.5973*(DBH/100)^2.0743),
Species == "Tulip Poplar" ~ (0.8086*(DBH/100)^1.8331),
Species == "Beech" ~ (0.8198*(DBH/100)^1.8635))
}
dbh %>%
mutate(Species = spp) %>%
mutate(Species = substr(Species,1,4),
Species = case_when(Species == "ACRU" ~ "Red Maple",
Species == "LITU" ~ "Tulip Poplar",
Species == "FAGR" ~ "Beech")) %>%
mutate(across(starts_with("DBH_"), ~SA(Species, .), .names = "SA_{str_extract(.col, '[0-9]{4}')}")) -> sa
sa %>%
pivot_longer(cols = starts_with("SA_"),
names_to = "Year",
names_prefix = "SA_",
values_to = "SA") %>%
mutate(Year = as.numeric(Year)) -> sa_long
mutate(sfd_data, Year = year(TIMESTAMP)) -> sfd_data
scaled <- merge(sfd_data, sa_long, by.x = c("ID", "Year", "Species"),
by.y = c("Sapflux_ID", "Year", "Species"), all.x = TRUE)
scaled %>%
select(ID, Year, Species, Plot, TIMESTAMP, Fd, SA) %>%
mutate(F = SA * Fd) -> sf_scaled
View(sf_scaled)
summary(sf_scaled$F)
sapflow_sp %>%
left_join(sapflow_dtmax, by = c("Plot", "Species", "ID", "Date")) %>%
mutate(Fd = ((0.00011899 * (((dTmax / Value) - 1)))^1.231)) -> sfd_data
View(sfd_data)
#Load in dbh data (for scaling)
inventory <- readRDS("dbh.rds")
inventory %>%
select(Tree_ID, Sapflux_ID, spp, DBH_2024, DBH_2022, DBH_2023, DBH_2021) -> dbh
SA <- function(Species, DBH) {
case_when(
Species == "Red Maple" ~ (0.5973*(DBH/100)^2.0743),
Species == "Tulip Poplar" ~ (0.8086*(DBH/100)^1.8331),
Species == "Beech" ~ (0.8198*(DBH/100)^1.8635))
}
dbh %>%
mutate(Species = spp) %>%
mutate(Species = substr(Species,1,4),
Species = case_when(Species == "ACRU" ~ "Red Maple",
Species == "LITU" ~ "Tulip Poplar",
Species == "FAGR" ~ "Beech")) %>%
mutate(across(starts_with("DBH_"), ~SA(Species, .), .names = "SA_{str_extract(.col, '[0-9]{4}')}")) -> sa
sa %>%
pivot_longer(cols = starts_with("SA_"),
names_to = "Year",
names_prefix = "SA_",
values_to = "SA") %>%
mutate(Year = as.numeric(Year)) -> sa_long
mutate(sfd_data, Year = year(TIMESTAMP)) -> sfd_data
scaled <- merge(sfd_data, sa_long, by.x = c("ID", "Year", "Species"),
by.y = c("Sapflux_ID", "Year", "Species"), all.x = TRUE)
scaled %>%
select(ID, Year, Species, Plot, TIMESTAMP, Fd, SA) %>%
mutate(F = SA * Fd) -> sf_scaled
View(sf_scaled)
sapflow_sp %>%
left_join(sapflow_dtmax, by = c("Plot", "Species", "ID", "Date")) %>%
mutate(Fd = ((0.00011899 * (((dTmax / Value) - 1)))^1.231)) %>%
mutate(Fd = 3600 * Fd) -> sfd_data
View(sfd_data)
sapflow_sp %>%
left_join(sapflow_dtmax, by = c("Plot", "Species", "ID", "Date")) %>%
mutate(Fd = ((0.00011899 * (((dTmax / Value) - 1)))^1.231)) %>%
mutate(Fd = 3600 * 1000 * Fd) -> sfd_data
View(sfd_data)
summary(sfd_data$Fd)
sapflow_sp %>%
left_join(sapflow_dtmax, by = c("Plot", "Species", "ID", "Date")) %>%
mutate(Fd = ((0.00011899 * (((dTmax / Value) - 1)))^1.231),
Fd = 60 * 60 * 1000 * Fd) -> sfd_data
sapflow_sp %>%
left_join(sapflow_dtmax, by = c("Plot", "Species", "ID", "Date")) %>%
mutate(Fd = ((0.00011899 * (((dTmax / Value) - 1)))^1.231),
Fd = 60 * 60 * 1000 * Fd) -> sfd_data
#Load in dbh data (for scaling)
inventory <- readRDS("dbh.rds")
inventory %>%
select(Tree_ID, Sapflux_ID, spp, DBH_2024, DBH_2022, DBH_2023, DBH_2021) -> dbh
SA <- function(Species, DBH) {
case_when(
Species == "Red Maple" ~ (0.5973*(DBH*10)^2.0743),
Species == "Tulip Poplar" ~ (0.8086*(DBH*10)^1.8331),
Species == "Beech" ~ (0.8198*(DBH*10)^1.8635))
}
dbh %>%
mutate(Species = spp) %>%
mutate(Species = substr(Species,1,4),
Species = case_when(Species == "ACRU" ~ "Red Maple",
Species == "LITU" ~ "Tulip Poplar",
Species == "FAGR" ~ "Beech")) %>%
mutate(across(starts_with("DBH_"), ~SA(Species, .), .names = "SA_{str_extract(.col, '[0-9]{4}')}")) -> sa
sa %>%
pivot_longer(cols = starts_with("SA_"),
names_to = "Year",
names_prefix = "SA_",
values_to = "SA") %>%
mutate(Year = as.numeric(Year)) -> sa_long
mutate(sfd_data, Year = year(TIMESTAMP)) -> sfd_data
scaled <- merge(sfd_data, sa_long, by.x = c("ID", "Year", "Species"),
by.y = c("Sapflux_ID", "Year", "Species"), all.x = TRUE)
scaled %>%
select(ID, Year, Species, Plot, TIMESTAMP, Fd, SA) %>%
mutate(F = SA * Fd) -> sf_scaled
summary(sf_scaled$F)
summary(sf_scaled$Fd)
sf_scaled %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
mutate(monthyr = floor_date(TIMESTAMP, unit = "week")) %>%
filter(Hour >= 11, Hour <= 12) %>%
#filter(F <= 17500, F > 0) %>%
group_by(Plot, Species, Date) %>%
summarise(F_avg = mean(F, na.rm = TRUE)) %>%
mutate(F_avg = round(F_avg, digits = 3)) -> sf_plot_avg
ggplot(sf_plot_avg) +
geom_point(aes (x = Date, y = F_avg, color = Species)) +
#geom_errorbar(aes(ymin = F_avg - F_error, ymax = F_avg + F_error,
#x = Month, color = Species)) +
facet_wrap(~Plot, ncol = 1, scales = "fixed") +
labs(y = "Avg Sap Flux Density", x = "Date", title = "Sap Flux Density Averaged Daily, 11 AM - 12 PM")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
sf_scaled %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
mutate(monthyr = floor_date(TIMESTAMP, unit = "week")) %>%
filter(Hour >= 11, Hour <= 12) %>%
#filter(F <= 17500, F > 0) %>%
group_by(Plot, Species, Date) %>%
summarise(F_avg = mean(F, na.rm = TRUE)) %>%
mutate(F_avg = round(F_avg, digits = 3)) -> sf_plot_avg
ggplot(sf_plot_avg) +
geom_point(aes (x = Date, y = F_avg, color = Species)) +
#geom_errorbar(aes(ymin = F_avg - F_error, ymax = F_avg + F_error,
#x = Month, color = Species)) +
facet_wrap(~Plot, ncol = 1, scales = "fixed") +
labs(y = "Avg Sap Flux Density", x = "Date", title = "Sap Flux Density Averaged Daily, 11 AM - 12 PM")
#Create sapflow-only dataframe with scaled Fd
sapflow <- tmp_full %>%
filter(Instrument == "Sapflow",
Value >= 0.01, Value <=0.7) %>%
select(Plot, TIMESTAMP, Sensor_ID, Value) %>%
mutate(sapflow_2.5cm = Value) %>%
mutate(Date = date(TIMESTAMP))
#Merge sapflow and species dataframe
sapflow_sp <-
merge(species, sapflow, by.x = c("Sapflux_ID", "Plot"), by.y = c("Sensor_ID", "Plot"), all.x = TRUE, all.y = TRUE)
mutate(sapflow_sp, ID = Sapflux_ID) -> sapflow_sp
#Calculate dTmax
sapflow_sp %>%
mutate(Date = date(TIMESTAMP)) %>%
group_by(Date, Plot, Species, ID) %>%
summarise(dTmax = max(Value, na.rm = TRUE),
dTmax_time = TIMESTAMP[which.max(Value)])-> sapflow_dtmax
sapflow_sp %>%
left_join(sapflow_dtmax, by = c("Plot", "Species", "ID", "Date")) %>%
mutate(Fd = ((0.00011899 * (((dTmax / Value) - 1)))^1.231)) ->sfd_data
#Load in dbh data (for scaling)
inventory <- readRDS("dbh.rds")
inventory %>%
select(Tree_ID, Sapflux_ID, spp, DBH_2024, DBH_2022, DBH_2023, DBH_2021) -> dbh
SA <- function(Species, DBH) {
case_when(
Species == "Red Maple" ~ (0.5973*(DBH/100)^2.0743),
Species == "Tulip Poplar" ~ (0.8086*(DBH/100)^1.8331),
Species == "Beech" ~ (0.8198*(DBH/100)^1.8635))
}
dbh %>%
mutate(Species = spp) %>%
mutate(Species = substr(Species,1,4),
Species = case_when(Species == "ACRU" ~ "Red Maple",
Species == "LITU" ~ "Tulip Poplar",
Species == "FAGR" ~ "Beech")) %>%
mutate(across(starts_with("DBH_"), ~SA(Species, .), .names = "SA_{str_extract(.col, '[0-9]{4}')}")) -> sa
sa %>%
pivot_longer(cols = starts_with("SA_"),
names_to = "Year",
names_prefix = "SA_",
values_to = "SA") %>%
mutate(Year = as.numeric(Year)) -> sa_long
mutate(sfd_data, Year = year(TIMESTAMP)) -> sfd_data
scaled <- merge(sfd_data, sa_long, by.x = c("ID", "Year", "Species"),
by.y = c("Sapflux_ID", "Year", "Species"), all.x = TRUE)
scaled %>%
select(ID, Year, Species, Plot, TIMESTAMP, Fd, SA) %>%
mutate(F = SA * Fd) -> sf_scaled
summary(sf_scaled$Fd)
summary(sf_scaled$F)
ggplot(sf_plot_avg) +
geom_point(aes (x = Date, y = F_avg, color = Species)) +
#geom_errorbar(aes(ymin = F_avg - F_error, ymax = F_avg + F_error,
#x = Month, color = Species)) +
facet_wrap(~Plot, ncol = 1, scales = "fixed") +
labs(y = "Avg Sap Flux Density", x = "Date", title = "Sap Flux Density Averaged Daily, 11 AM - 12 PM")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(ggpmisc)
#Import all data
full_data <- readRDS("Full_21_24.rds")
#Import all data
full_data <- readRDS("Full_21_24.rds")
#Pre and post-TEMPEST weeks for reference:
weeks_start <- c("2022-06-15", "2022-06-23", "2023-05-30", "2023-06-08", "2021-06-06", "2021-06-13")
weeks_end <- c("2022-06-21", "2022-06-29", "2023-06-05", "2023-06-14", "2021-06-12", "2021-06-19")
weeks_start<- as_date(weeks_start)
weeks_end<- as_date(weeks_end)
full_data %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
mutate(Week = floor_date(TIMESTAMP, unit = "week")) %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(F <= 0.000002, F > 0) %>%
group_by(Plot, Species, Date) %>%
summarise(F_avg = mean(F, na.rm = FALSE),
F_error = sd(F, na.rm = FALSE)) -> sf_plot_avg
ggplot(sf_plot_avg) +
geom_point(aes (x = Date, y = F_avg, color = Species)) +
#geom_errorbar(aes(ymin = F_avg - F_error, ymax = F_avg + F_error,
#x = Date, color = Species)) +
facet_wrap(~Plot, ncol = 1, scales = "fixed") +
annotate(geom = "rect", xmin=Ida_start, xmax=Ida_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
annotate(geom = "rect", xmin=Elsa_start, xmax=Elsa_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
labs(y = expression(Average~Sap~Flux~Density~(m^3/s)), x = "Date", title = "Sap Flux Density Averaged Daily, 11 AM - 12 PM")
#Store storm events
Ida_start <- as_date("2021-08-26")
Ida_end <- as_date("2021-09-01")
Elsa_start <- as_date("2021-06-30")
Elsa_end <- as_date("2021-07-09")
ggplot(sf_plot_avg) +
geom_point(aes (x = Date, y = F_avg, color = Species)) +
#geom_errorbar(aes(ymin = F_avg - F_error, ymax = F_avg + F_error,
#x = Date, color = Species)) +
facet_wrap(~Plot, ncol = 1, scales = "fixed") +
#annotate(geom = "rect", xmin=Ida_start, xmax=Ida_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
# annotate(geom = "rect", xmin=Elsa_start, xmax=Elsa_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
labs(y = expression(Average~Sap~Flux~Density~(m^3/s)), x = "Date", title = "Sap Flux Density Averaged Daily, 11 AM - 12 PM")
full_data %>%
mutate(Hour = hour(TIMESTAMP)) %>%
mutate(Date = date(TIMESTAMP)) %>%
mutate(Year = year(TIMESTAMP)) %>%
filter(Year == 2022) %>%
mutate(Week = floor_date(TIMESTAMP, unit = "week")) %>%
filter(Hour >= 11, Hour <= 12) %>%
filter(Date >= weeks_start & Date <= weeks_end) %>%
filter(F <= 0.000002, F > 0) %>%
group_by(Plot, Species, Date) %>%
summarise(F_avg = mean(F, na.rm = FALSE),
F_error = sd(F, na.rm = FALSE)) -> sf_plot_avg
ggplot(sf_plot_avg) +
geom_point(aes (x = Date, y = F_avg, color = Species)) +
#geom_errorbar(aes(ymin = F_avg - F_error, ymax = F_avg + F_error,
#x = Date, color = Species)) +
facet_wrap(~Plot, ncol = 1, scales = "fixed") +
#annotate(geom = "rect", xmin=Ida_start, xmax=Ida_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
# annotate(geom = "rect", xmin=Elsa_start, xmax=Elsa_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
labs(y = expression(Average~Sap~Flux~Density~(m^3/s)), x = "Date", title = "Sap Flux Density Averaged Daily, 11 AM - 12 PM")
ggplot(sf_plot_avg) +
geom_line(aes (x = Date, y = F_avg, color = Species)) +
#geom_errorbar(aes(ymin = F_avg - F_error, ymax = F_avg + F_error,
#x = Date, color = Species)) +
facet_wrap(~Plot, ncol = 1, scales = "fixed") +
#annotate(geom = "rect", xmin=Ida_start, xmax=Ida_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
# annotate(geom = "rect", xmin=Elsa_start, xmax=Elsa_end, ymin= -Inf, ymax=Inf, alpha=0.6, fill="lightblue") +
labs(y = expression(Average~Sap~Flux~Density~(m^3/s)), x = "Date", title = "Sap Flux Density Averaged Daily, 11 AM - 12 PM")
